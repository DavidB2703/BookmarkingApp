@using SocialBookmarkingApp.Controllers
@using Microsoft.AspNetCore.Identity
@model SocialBookmarkingApp.Models.Bookmark

@inject SignInManager<ApplicationUser> SignInManager


<div class="d-flex bookmark-container">
    <div class="flex-shrink-1 flex-grow-1 media-overlay overflow-hidden" style="min-width: 0">
        @if (Model.MediaType is MediaType.LocalImage or MediaType.EmbeddedImage) {
            <img src="@Model.MediaUrl" alt="Bookmark Image" class="w-100">
        }
        else if (Model.MediaType is MediaType.LocalVideo or MediaType.EmbeddedVideo) {
            <video src="@Model.MediaUrl" alt="Bookmark Video" class="w-100" autoplay controls muted loop></video>
        }
    </div>
    <div class="flex-grow-1 d-flex flex-column p-4">
        <div class="d-flex flex-row align-items-center mb-2">
            <form method="post" action="/Bookmarks/Review/@Model.Id">
                <select class="star-rating" disabled>
                    @{
                        if (Model.AverageRating == 0) {
                            <option value="" disabled selected></option>
                        }
                        for (int i = 5; i > 0; i--) {
                            if (Model.AverageRating == i) {
                                <option value="@i" selected>@i</option>
                            }
                            else {
                                <option value="@i">@i</option>
                            }
                        }
                    }
                </select>
            </form>
            <span class="ms-2">@(Model.Reviews?.Count ?? 0) Reviews</span>
            @if (SignInManager.IsSignedIn(User)) {
                <button class="btn btn-primary ml-auto" data-toggle="modal" data-target="#saveModal">
                    Save
                    <i class="bi bi-bookmark"></i>
                </button>
            }
        </div>
        <h3>
            @Model.Title
        </h3>
        <p>
            @Model.Description
        </p>
        <div class="d-flex flex-row align-items-center p-2 mb-3">
            <a href="/Profile/@Model.User.Id">
                <img src="@Model.User.ProfilePicture" alt="@Model.User.Email" class="me-2" style="width: 50px; height: 50px; object-fit: cover; border-radius: 50%">
            </a>
            <div class="d-flex flex-column">
                <span class="me-2 author-name">@Model.User.UserName</span>
                <span class="author-bookmark">@(Model.User.Bookmarks?.Count ?? 0) bookmarks</span>
            </div>
            @if (SignInManager.IsSignedIn(User)) {
                <div class="ml-auto d-flex flex-row align-items-center gap-2">
                    Your rating:
                    <select class="star-rating-user" onchange="changeRating(this)">
                        @{
                            var rating = Model.Reviews?.FirstOrDefault(r => r.User?.UserName == User.Identity?.Name)?.Rating ?? 0;
                            if (rating == 0) {
                                <option value="" disabled selected></option>
                            }
                            for (int i = 5; i > 0; i--) {
                                if (rating == i) {
                                    <option value="@i" selected>@i</option>
                                }
                                else {
                                    <option value="@i">@i</option>
                                }
                            }
                        }
                    </select>
                </div>
            }
        </div>
        <div class="d-flex flex-column gap-2 flex-grow-1">
            <h4 class="fw-bold">
                @(Model.Comments?.Count ?? 0) Comments
            </h4>
            <div>
                @foreach (SocialBookmarkingApp.Models.Comment comment in @Model.Comments ?? new List<SocialBookmarkingApp.Models.Comment>()) {
                    <div class="d-flex flex-row">
                        <img src="@comment.User.ProfilePicture" alt="@comment.User.Email" class="me-2" style="width: 30px; height: 30px; object-fit: cover; border-radius: 50%">
                        <p>
                            <span class="fw-bold">@comment.User.UserName</span>: @comment.Content
                        </p>
                        @if (User.Identity?.IsAuthenticated ?? false && User.Identity.Name == comment.User.UserName) {
                            <form action="/Bookmarks/DeleteComment/@comment.Id" method="post" class="ml-auto">
                                <button type="submit" class="btn btn-outline-danger" style="border: none;">
                                    <i class="bi bi-trash3-fill"></i>
                                </button>
                            </form>
                        }
                    </div>
                }
            </div>
            @if (SignInManager.IsSignedIn(User)) {
                @using (Html.BeginForm("NewComment", "Bookmarks", FormMethod.Post, new { @class = "form-horizontal mt-auto" })) {
                    @Html.AntiForgeryToken()

                    <input type="hidden" name="BookmarkId" value="@Model.Id"/>

                    <div class="input-group">
                        @Html.TextArea("Content", null, new { @class = "form-control comment-bar", @placeholder = "Add a comment", @rows = 1, @style = "resize: none;" })
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="submit">
                                <i class="bi bi-send-fill"></i>
                            </button>
                        </div>
                    </div>

                    @Html.ValidationMessage("Content", null, new { @class = "text-danger" })
                }
            }
        </div>
    </div>
</div>

<h2 class="mt-5 mb-3">
    More like this
</h2>

<div class="related-bookmark-container">

    @foreach (var bookmark in @Model.RelatedBookmarks) {
        @await Html.PartialAsync("_BookmarkCard", new BookmarkViewModel {
                   Bookmark = bookmark
               })
    }

</div>

<partial name="_BookmarkSave" model="@(new BookmarkSaveModel() { Categories = Model.Categ, BookmarkId = Model.Id })"/>

@section Scripts {
    <script>
    
        async function changeRating(select) {
            
            const rating = select.value;
            const bookmarkId = @Model.Id;
            const url = `/Bookmarks/Review/${bookmarkId}?rating=${rating}`;
           
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            });
            }
    $(() => {
        const stars = new StarRating('.star-rating', {
            tooltip: false,
            });
        const userStars = new StarRating('.star-rating-user', {
            tooltip: false,
            });
        const container = document.querySelector('.related-bookmark-container');
                const msnry = new Masonry(container, {
                    // options
                    itemSelector: '.bookmark',
                });
            });
    </script>
}